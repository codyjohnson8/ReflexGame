// Circuit Playground Tap Detect
//
// Author: Carter Nelson
// MIT License (https://opensource.org/licenses/MIT)
//
// Talkie library
// Copyright 2011 Peter Knight
// This code is released under GPLv2 license.
//
#include <Adafruit_CircuitPlayground.h>
#include <Adafruit_CircuitPlayground.h>
#include <Wire.h>
#include <SPI.h>
#include <AsyncDelay.h>

//Int and shit
  #define CLICK 120

  AsyncDelay delay_s;

  volatile int mode = 0;
  volatile bool Lbutton = false;
  volatile bool Rbutton = false;
  volatile bool tapflag = false;

  float soundvalue;  // MIGHT NOT NEED
  float lightvalue;
  float midi[127];
  const int LEFT_BUTTON_PIN = 4;
  const int RIGHT_BUTTON_PIN = 5;
  const uint8_t spTHIR_[] PROGMEM = { 0x04, 0xA8, 0xBE, 0x5C, 0x00, 0xDD, 0xA5, 0x11, 0xA0, 0xFA, 0x72, 0x02, 0x74, 0x97, 0xC6, 0x01, 0x09, 0x9C, 0xA6, 0xAB, 0x30, 0x0D, 0xCE, 0x7A, 0xEA, 0x6A, 0x4A, 0x39, 0x35, 0xFB, 0xAA, 0x8B, 0x1B, 0xC6, 0x76, 0xF7, 0xAB, 0x2E, 0x79, 0x19, 0xCA, 0xD5, 0xEF, 0xCA, 0x57, 0x08, 0x14, 0xA1, 0xDC, 0x45, 0x64, 0x03, 0x00, 0xC0, 0xFF, 0x03 };
  const uint8_t spS[] PROGMEM = { 0x6B, 0x6E, 0xD9, 0x34, 0x6C, 0xE6, 0xDC, 0xF6, 0x36, 0xB7, 0xBE, 0xF5, 0x19, 0xAA, 0x0F, 0x2D, 0xDA, 0x25, 0x7B, 0x19, 0x5B, 0x4D, 0x9A, 0xA2, 0xE7, 0xB8, 0x1D, 0x23, 0xA5, 0x26, 0x71, 0x2A, 0x03, 0xFC, 0x94, 0xE6, 0x01, 0x0F, 0x68, 0x40, 0x03, 0x12, 0xE0, 0x00, 0x07, 0x30, 0xF0, 0xFF };
  const uint8_t spT[] PROGMEM = { 0x01, 0xD8, 0xB6, 0xDD, 0x01, 0x2F, 0xF4, 0x38, 0x60, 0xD5, 0xD1, 0x91, 0x4D, 0x97, 0x84, 0xE6, 0x4B, 0x4E, 0x36, 0xB2, 0x10, 0x67, 0xCD, 0x19, 0xD9, 0x2C, 0x01, 0x94, 0xF1, 0x78, 0x66, 0x33, 0xEB, 0x79, 0xAF, 0x7B, 0x57, 0x87, 0x36, 0xAF, 0x52, 0x08, 0x9E, 0x6B, 0xEA, 0x5A, 0xB7, 0x7A, 0x94, 0x73, 0x45, 0x47, 0xAC, 0x5A, 0x9C, 0xAF, 0xFF, 0x07 };
  const uint8_t spPOINT[] PROGMEM = { 0x06, 0xA8, 0xCC, 0x4B, 0x03, 0x2D, 0xF3, 0x69, 0x2B, 0x8C, 0x1A, 0xAF, 0x2C, 0x98, 0xE9, 0x28, 0x4A, 0xB3, 0xF3, 0x53, 0xC6, 0x90, 0x9E, 0xC1, 0x6D, 0x76, 0x77, 0xE6, 0x9C, 0x5D, 0xD3, 0x75, 0xF1, 0x58, 0x5B, 0x75, 0x76, 0xB7, 0x4F, 0xE3, 0xE8, 0xCE, 0x31, 0x3A, 0x17, 0xB6, 0xB3, 0x45, 0x96, 0xF4, 0xAA, 0x6D, 0x4F, 0x75, 0x76, 0xA3, 0x94, 0x66, 0x6E, 0x10, 0x28, 0x42, 0xB9, 0x8B, 0xC8, 0x06, 0x50, 0xC0, 0x32, 0x11, 0x0A, 0x58, 0x76, 0x87, 0x01, 0x3D, 0xB5, 0xFE, 0x3F };
  const uint8_t spTWEN_[] PROGMEM = { 0x01, 0x98, 0xC1, 0xC2, 0x00, 0xCD, 0x4E, 0x28, 0xA0, 0xCC, 0x8A, 0xE2, 0xC7, 0xA2, 0x6E, 0x16, 0x8D, 0x8E, 0x57, 0xBC, 0x4B, 0xBA, 0xAF, 0x3E, 0x7E, 0x0F, 0x45, 0xE1, 0xDA, 0xF9, 0x04, 0xD3, 0x35, 0x85, 0x7A, 0xAB, 0x13, 0x75, 0xE5, 0xD4, 0x16, 0x89, 0x46, 0xDC, 0x94, 0xD0, 0x51, 0xD9, 0x4D, 0x69, 0x56, 0x1C, 0xC5, 0xA9, 0x8C, 0xD4, 0x42, 0xB9, 0xBB, 0x88, 0x6C, 0x80, 0xFF, 0x66 };


  int score = 0;         //initial score
  int currentIndex = 0;  // for color rotation
  int A_four = 440; 

  uint32_t gameco[10] = {
  // bop it colors
  0x0000FF,  //blue
  0x0000FF,  //blue
  0xFFFFFF,
  0x00FF00,  //green
  0x00FF00,  //green
  0xFF0000,  //red
  0xFF0000,  //red
  0xFFFFFF,
  0xFFFF00,  //yellow
  0xFFFF00,  //yellow
  };

void setup() {
  CircuitPlayground.begin();
  Serial.begin(9600);
  CircuitPlayground.setAccelTap(1, CLICK);
  generateMIDI();

  CircuitPlayground.setAccelRange(LIS3DH_RANGE_8_G);

  attachInterrupt(digitalPinToInterrupt(LEFT_BUTTON_PIN), lefty, FALLING);
  attachInterrupt(digitalPinToInterrupt(RIGHT_BUTTON_PIN), righty, FALLING);

  delay(3000);
  Serial.println("            Welcome to reaction time game!");
  Serial.println("The serial monitor will give you an order you must complete, and");
  Serial.println("if you do not complete it before the set time runs out you fail.");
  Serial.println("The game will consecutivly get harder every point you score, so");
  Serial.println("be smart and be fast. Get 30 points, win the game, good luck. ");
  Serial.println("            Click any button to start game.");
}

void loop() {

  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, gameco[(currentIndex + i) % 10]);
  }
  currentIndex = (currentIndex + 1) % 10;
  delay(300);

  int time = map(score, 0, 22, 3000, 0);  // change best scorish to more then 10, set to 30 rn



  const char* pass[6] = { //pass round back talk
                          "We're just getting started!",
                          "Alright let's see how you do on the next one!",
                          "You scraped by this time!",
                          "That was easy!",
                          "Impressive... not!",
                          "Beginner's Luck!"
  };      int passnum = random(0, 6);


  const char* fail[6] = { // fail round back talk
                          "You blew it! Better luck next time!",
                          "Nice try, loser!",
                          "Total fail! Come on!",
                          "Really? That was weak!",
                          "Fail! That was embarrassing!",
                          "Epic fail! Try again!"
  };      int failnum = random(0, 6);
  

  if (score == 5) {
    mode = 6;
  }



  switch (mode) {
    case 0:
      if (Lbutton || Rbutton) {  // if either button is clicked, start game again
        Lbutton = false;
        Rbutton = false;
        mode = random(1, 4);
      }
      break;
    case 1:  //Tap
      Serial.println("Tap it!");
      delay(500);
      delay_s.start(time, AsyncDelay::MILLIS);

      while (!delay_s.isExpired()) {
        attachInterrupt(digitalPinToInterrupt(CPLAY_LIS3DH_INTERRUPT), TAP, FALLING);
        if (tapflag == true) {
          mode = 5;
          return;
        }
      }
      if (delay_s.isExpired()) {
        mode = 4;
      }
      break;
    case 2:  // Cover
      Serial.println("Cover it!");
      delay(500);
      delay_s.start(time, AsyncDelay::MILLIS);

      while (!delay_s.isExpired()) {
        float lightvalue = CircuitPlayground.lightSensor();

        if (lightvalue <= 4) {
          mode = 5;
          return;
        }
      }

      if (delay_s.isExpired()) {
        mode = 4;
      }
      break;
    case 3:  // Sing
      Serial.println("Sing it!");
      delay(500);
      delay_s.start(time, AsyncDelay::MILLIS);

      while (!delay_s.isExpired()) {
        float soundvalue = CircuitPlayground.mic.soundPressureLevel(50);

        if (soundvalue > 100) {
          mode = 5;
          return;
        }
      }

      if (delay_s.isExpired()) {
        mode = 4;
      }
      break;
    case 4:  // if you fail round
      for (int i = 0; i < 10; i++) {  //set all pixles to red
        CircuitPlayground.setPixelColor(i, 0xFF0000);
      }

      Serial.println(fail[failnum]);  //say final score
      Serial.print("Final Score: ");
      Serial.println(score);
      score = 0;  //reset score

      delay(2000);
      Serial.println("Click either button to try again.");
      if (Lbutton || Rbutton) {  // if either button is clicked, start game again
        Lbutton = false;
        Rbutton = false;
        mode = random(1, 4);
      }
      mode = 0;
      break;
    case 5:  // if you pass round

      for (int i = 0; i < 10; i++) {
        CircuitPlayground.setPixelColor(i, 0x00FF00);
      }
      Serial.println(pass[passnum]);
      score++;
      Serial.print("Score: ");
      Serial.println(score);
      tapflag = false;
      delay(2000);
      mode = random(1, 4);
      break;
    case 6:  // if you win game
      delay(2000);
      score == 0;

      //Speaker
      CircuitPlayground.speaker.say(spTHIR_);
      CircuitPlayground.speaker.say(spTWEN_);
      CircuitPlayground.speaker.say(spT);
      CircuitPlayground.speaker.say(spPOINT);
      CircuitPlayground.speaker.say(spS);
      CircuitPlayground.speaker.end();

      Serial.println("Congratulations you Win!");
      Serial.println("Click either button to play again.");

      mode = 0;
      break;
    default:
      mode = 0;  // Reset mode if something unexpected happens
      break;
  }
}

//Void Clean up
void TAP() {
  tapflag = true;
}
void lefty() {
  Lbutton = true;
}
void righty() {
  Rbutton = true;void generateMIDI() {
  for (int x = 0; x < 127; ++x) {
    midi[x] = (A_four / 32.0) * pow(2.0, ((x - 9.0) / 12.0));
    Serial.println(midi[x]);
  }
}
}
